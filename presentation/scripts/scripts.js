"use strict";var applause=angular.module("applauseApp",["ngAnimate","ngSanitize","ngStorage","applauseTemplates","applauseConfig"]);!function(n){try{n=angular.module("applauseTemplates")}catch(e){n=angular.module("applauseTemplates",[])}n.run(["$templateCache",function(n){n.put("slides.html","<slide class='cover'>\n<h1>Streamline your dev env with Docker <span>Giacomo Bagnoli, #RUBYDAY2014</span></h1>\n</slide>\n\n<slide>\n\n  <h2><code class='inline'>WHOAMI</code></h2>\n  <img class=\"center media fright\" src='images/me.jpg' alt='Giacomo Bagnoli'/>\n  <p class='big'>\n    Giacomo Bagnoli\n  </p>\n\n  <p>\n    Currently Backend Engineer at <a href='http://www.gild.com'>Gild</a>\n  </p>\n  <p>\n    Previously at <a href='http://www.a9.com'>Amazon</a> and <a href='https://twitter.com/asidev'>Asidev</a>\n  </p>\n\n  <ul>\n    <li>\n      <a href='https://twitter.com/gbagnoli'>Twitter: @gbagnoli</a>\n    </li>\n    <li>\n      <a href='https://github.com/gbagnoli'>Github: gbagnoli</a>\n    </li>\n    <li>\n      <a href='http://about.me/gbagnoli'>about.me/gbagnoli</a>\n    </li>\n  </ul>\n</slide>\n\n<slide>\n  <h2>What's wrong with my dev environment?</h2>\n  <p>Nothing in particular. It's <strong>not*</strong> broken, so let's fix it.</p>\n  <img class=\"center media\" src=\"images/streamline.png\" alt=\"Streamline\"/>\n  <p class=\"light\">* conditions apply</p>\n</slide>\n\n<slide bg-img=\"snowflakes.jpg\" credits=\"https://www.flickr.com/photos/amagill/4223790595/\">\n  <h2>What's wrong with my dev environment?</h2>\n  <p class='big'>Your development<br /> environment is probably <br/>\n  a beautiful, unique<br/> <strong>snowflake</strong></p>\n</slide>\n\n<slide>\n  <h2>What's Docker, anyway?!?</h2>\n\n  <p>Open source platform</p>\n  <img class=\"center media fright\" src='images/docker.png' alt='Docker logo'/>\n  <ul>\n    <li>Docker Engine</li>\n\n      <ul>\n        <li>Container management runtime</li>\n        <li>Packaging tools for images</li>\n      </ul>\n\n    <li>Docker Hub</li>\n  </ul>\n</slide>\n\n<slide>\n  <h2>Containers, uh?</h2>\n  <img class=\"center media fright\" src='images/containers.jpg' alt='Containers'/>\n\n  <ul>\n    <li>Operating system-level virtualization*</li>\n    <li>Runs multiple isolated <strong>linux</strong> systems</li>\n    <li>On a single host, with a single kernel</li>\n    <li>No <code class=\"inline\">/sbin/init</code>, no device emulation</li>\n    <li>Think them as <code class=\"inline\">chroot</code> on steroids</li>\n  </ul>\n\n  <p>&nbsp;</p>\n\n  <ul>\n    <li>Isolation provided by linux <code class=\"inline\">cgroups</code> and <code class=\"inline\">namespaces</code></li>\n    <li>Resource limiting and prioritization via <code class=\"inline\">cgroups</code></li>\n    <li>Resource usage accounting via <code class=\"inline\">cgroups</code></li>\n  </ul>\n\n  <p>&nbsp;</p>\n  <p class=\"light\">* not a virtualization method, containers != VM</p>\n</slide>\n\n<slide>\n  <h2>Docker Images (0)</h2>\n  <img class=\"center media fright\" src='images/docker-images.png' alt='Docker Images'/>\n  <p>\n    <em>Portable</em>, <strong>read-only</strong> layers.\n  </p>\n  <p>\n    Images are composed at run-time to form the container root FS using an union filesystem.\n  </p>\n  <p>\n    Processes tricked to see the filesystem as R/W.\n  </p>\n  <p>\n    The writable layer is discarded if the container is not <strong>committed</strong>.\n  </p>\n  <p>\n    The read-only and portable properties are <strong>important</strong> as they\n    enable sharing (via the docker hub).\n  </p>\n</slide>\n\n<slide>\n  <h2>Docker Images (1)</h2>\n  <img class=\"center media fright\" src='images/docker-dag.png' alt='Docker DAG'/>\n  <p>\n    Docker images form a <strong>D</strong>irect <strong>A</strong>cyclic <strong>G</strong>raph.\n  </p>\n  <p>\n    Each layer is cached (possibly) and reused by other images.\n  </p>\n  <p>\n    This means that if multiple images derive from <code class='inline'>debian:wheezy</code>,\n    that particular image is shared by all of them (thus downloaded once).\n  </p>\n  <p>\n     Images are pushed/pull to/from the docker hub.\n  </p>\n</slide>\n\n<slide>\n  <h2>Docker Images (2)</h2>\n<code prism class='language-bash'>\n$ docker pull ubuntu:14.04\n$ docker pull ubuntu:12.04\n$ docker pull redis:2.8.13\n$ docker pull debian:wheezy\n$ docker pull mongo:2.6.4\n\n$ docker images\nREPOSITORY   TAG           IMAGE ID            CREATED             VIRTUAL SIZE\nredis        2.8.13        dd52dc9c8f76        9 minutes ago       98.44 MB\nmongo        2.6.4         dd1f260c0731        12 minutes ago      391.2 MB\ndebian       wheezy        9cdcc6025135        18 hours ago        85.19 MB\nubuntu       14.04         96864a7d2df3        2 days ago          204.4 MB\nubuntu       12.04         ec966722cde4        2 days ago          103.8 MB\n  </code>\n</slide>\n\n<slide>\n  <h2>Docker Images (3)</h2>\n  <code prism class='language-bash'>\n$ docker images --tree\n└─511136ea3c5a Virtual Size: 0 B\n  └─b37448882294 Virtual Size: 85.19 MB\n    └─9cdcc6025135 Virtual Size: 85.19 MB Tags: debian:wheezy\n      ├─e365f7cdb352 Virtual Size: 85.52 MB\n      │ └─b15940870e43 Virtual Size: 85.52 MB\n\n      │             └─22ad4fc6b16f Virtual Size: 98.44 MB\n      │               └─bd1e22dd175d Virtual Size: 98.44 MB\n      │                 └─3b1ce200fdad Virtual Size: 98.44 MB\n      │                   └─dd52dc9c8f76 Virtual Size: 98.44 MB Tags: redis:2.8.13\n      └─49fd1ae472a8 Virtual Size: 85.52 MB\n        └─6c203838fd07 Virtual Size: 99.62 MB\n\n                      └─b1cd74f30329 Virtual Size: 391.2 MB\n                        └─9d0a3438646f Virtual Size: 391.2 MB\n                          └─dd1f260c0731 Virtual Size: 391.2 MB Tags: mongo:2.6.4\n  </code>\n</slide>\n\n<slide>\n  <h2>Let's build a ruby2 image</h2>\n<p>\n  Ubuntu 14.04 image has no ruby at all. Repos have ruby <code class='inline'>1.9</code>.\n</p>\n<p>\n  Let's create an image with <code class='inline'>2.1</code> as default.\n</p>\n\n<p>Dockerfile:</p>\n<code prism class='language-bash'>\nFROM ubuntu:14.04\nMAINTAINER Giacomo Bagnoli &lt;gbagnoli@gmail.com&gt;\n\nRUN echo \"deb http://ppa.launchpad.net/brightbox/ruby-ng/ubuntu trusty main\" > \\\n    /etc/apt/sources.list.d/ruby-ng.list\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C3173AA6\nRUN apt-get update\nRUN apt-get install -y ruby2.1\n</code>\n\nBuild!\n<code prism class='language-bash'>\n$ docker build --rm -t rubyday/ruby:2.1 .\n</code>\n</slide>\n\n<slide>\n  <h2>Ruby2 image</h2>\n  <p>\n    Each directive in the <code class=\"inline\">Dockerfile</code> adds a layer\n  </p>\n  <code prism class='language-bash'>\n$ docker images --tree\n\n└─96864a7d2df3 Virtual Size: 204.4 MB Tags: ubuntu:14.04\n  └─8f1b6341c5be Virtual Size: 204.4 MB                                 # MAINTAINER\n    └─d323cc59da91 Virtual Size: 204.4 MB                               # RUN\n      └─724a6664d97a Virtual Size: 204.4 MB                             # RUN\n        └─8614dab05fbe Virtual Size: 224.8 MB                           # RUN\n          └─d7ae4a198781 Virtual Size: 257.2 MB Tags: rubyday/ruby:2.1  # RUN\n  </code>\n\n  <code prism class='language-bash'>\n$ docker run -t rubyday/ruby:2.1 ruby -v\nruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-linux-gnu]\n  </code>\n\n  <p>\n    Woah, 53Mb. <code class='inline'>apt-get update</code> adds 20Mb to the image.\n  </p>\n</slide>\n\n<slide>\n  <h2>I tried...</h2>\n  <p>\n    Let's remove apt-get files by adding another RUN statement\n  </p>\n  <code prism class='language-bash'>\ndiff --git a/ruby2/Dockerfile b/ruby2/Dockerfile\nindex dd37dcb..2b9c105 100644\n--- a/ruby2/Dockerfile\n+++ b/ruby2/Dockerfile\n@@ -8,3 +8,4 @@\nRUN echo \"deb http://ppa.launchpad.net/brightbox/ruby-ng/ubuntu trusty main\" > /\n RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C3173AA6\n RUN apt-get update\n RUN apt-get install -y ruby2.1\n+RUN rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*.deb\n  </code>\n\n</slide>\n\n<slide>\n  <h2>... grumpy cat says</h2>\n  <img class=\"center media\" src='images/no.jpg' alt='Grumpy cat says no'/>\n</slide>\n\n<slide>\n  <h2>Layers..</h2>\n  <code prism class='language-bash'>\n$ docker images --tree\n\n└─96864a7d2df3 Virtual Size: 204.4 MB Tags: ubuntu:14.04\n  └─8f1b6341c5be Virtual Size: 204.4 MB                                   # MAINTAINER\n    └─d323cc59da91 Virtual Size: 204.4 MB                                 # RUN\n      └─724a6664d97a Virtual Size: 204.4 MB                               # RUN\n        └─8614dab05fbe Virtual Size: 224.8 MB                             # RUN\n          └─d7ae4a198781 Virtual Size: 257.2 MB                           # RUN\n            └─b8bb3ce3008e Virtual Size: 257.2 MB Tags: rubyday/ruby:2.1  # RUN\n  </code>\n\n  <p>\n    Remember that every directive adds a layer. Layers are read only.\n  </p>\n</slide>\n\n<slide>\n  <h2>Let's try once more</h2>\n  Let's rewrite the <code class=\"inline\">Dockerfile</code>\n  <code prism class='language-bash'>\nFROM ubuntu:14.04\nMAINTAINER Giacomo Bagnoli &lt;gbagnoli@gmail.com&gt;\n\nRUN \\\n echo \"deb http://ppa.launchpad.net/brightbox/ruby-ng/ubuntu trusty main\" \\\n    &gt; /etc/apt/sources.list.d/ruby-ng.list && \\\n    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C3173AA6 && \\\n    apt-get update && \\\n    apt-get install -y ruby2.1 && \\\n    rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*.deb\n  </code>\n</slide>\n\n<slide>\n  <h2>Rebuild</h2>\n  Build:\n  <code prism class='language-bash'>\n$ docker build --rm -t rubyday/ruby:2.1 .\n  </code>\n\n  <code prism class='language-bash'>\n$ docker images\nREPOSITORY           TAG        IMAGE ID            CREATED             VIRTUAL SIZE\nrubyday/ruby         2.1        b337a5c538f3        About a minute ago  236.9 MB\n  </code>\n\n  <code prism class='language-bash'>\n└─96864a7d2df3 Virtual Size: 204.4 MB Tags: ubuntu:14.04\n  └─86ae939e2da3 Virtual Size: 204.4 MB                         # MAINTAINER\n    └─b337a5c538f3 Virtual Size: 236.9 MB Tags: gild/ruby:2.1   # RUN\n  </code>\n\n  <p class=\"big\">\n    yay!\n  </p>\n</slide>\n\n<slide>\n  <h2>Pat me on the back</h2>\n  <img class=\"center media\" src='images/success.jpg' alt='Yay!'/>\n</slide>\n\n<slide>\n  <h2>... one more thing</h2>\n  <p>\n    We probably want <code class='inline'>-dev</code> packages and <code class='inline'>bundle</code>\n  </p>\n  <p>\n    Let's update the <code class='inline'>Dockerfile</code>\n  </p>\n  <code prism class='language-bash'>\nFROM ubuntu:14.04\n\nMAINTAINER Giacomo Bagnoli <gbagnoli@gmail.com>\nRUN \\\n echo \"deb http://ppa.launchpad.net/brightbox/ruby-ng/ubuntu trusty main\" \\\n    > /etc/apt/sources.list.d/ruby-ng.list\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C3173AA6\nRUN apt-get update && \\\n    apt-get install -y build-essential && \\\n    apt-get install -y ruby2.1 ruby2.1-dev && \\\n    update-alternatives --set ruby /usr/bin/ruby2.1 && \\\n    update-alternatives --set gem /usr/bin/gem2.1 && \\\n    rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*.deb\nRUN gem install bundle\n  </code>\n</slide>\n\n<slide>\n  <h2>Time for Rails</h2>\n  <img class=\"center media fright\" src='images/todo.png' alt='TODO list'/>\n  <p>\n    Let's try creating a <code class='inline'>Dockerfile</code> for a rails app.\n  </p>\n  <p>\n    The app is a <strike>random</strike> simple TODO list application found on Github.\n  </p>\n\n  <p>\n    It's a rails4 application that uses SQL, nothing fancy.\n  </p>\n  <p>\n    Let's assume we are developing this app targeting postgresql.\n  </p>\n  <p>\n    Github url: <br/>\n    <code class='inline'>https://github.com/gbagnoli/todo-rails4-angularjs</code>\n  </p>\n</slide>\n\n<slide>\n  <h2>A word on linking</h2>\n  <p>\n    In docker, we can access service(s) running in other container(s) via <strong>linking</strong>.\n  </p>\n  <p>\n    Linking a container to another will setup some environment variables in it,\n    allowing the container to discover and connect to the service.\n  </p>\n  <p>\n    We will use this feature to access <code class='inline'>postgres</code> from our app container.\n  </p>\n</slide>\n\n<slide>\n  <h2>The Dockerfile</h2>\n  <div class=\"scaled\">\n    <code prism class='language-bash'>\nFROM rubyday/ruby:2.1\nMAINTAINER Giacomo Bagnoli &lt;gbagnoli@gmail.com&gt;\n\nRUN adduser todo --home /opt/todo --shell /bin/bash --disabled-password --gecos \"\"\nRUN apt-get update && \\\n    apt-get install -y libpq-dev nodejs && \\\n    rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*.deb\n\nADD Gemfile /opt/todo/\nADD Gemfile.lock /opt/todo/\nRUN chown -R todo:todo /opt/todo\nRUN su -c \"D=/opt/todo/bundle; mkdir $D && bundle install --deployment --path $D\"\\\n  -s /bin/bash -l todo\n\nWORKDIR /opt/todo\nEXPOSE 3000\nADD . /opt/todo\nRUN chown -R todo:todo /opt/todo\n\nUSER todo\nENTRYPOINT [\"/bin/bash\", \"/opt/todo/bin/docker_entrypoint.sh\"]\nCMD [\"bundle\", \"exec\", \"rails\", \"server\"]\n    </code>\n  </div>\n</slide>\n\n<slide>\n  <h2>Dockerfile explained (0)</h2>\n  <code prism class='language-bash'>\nFROM rubyday/ruby:2.1\n\nMAINTAINER Giacomo Bagnoli &lt;gbagnoli@gmail.com&gt;\n  </code>\n</slide>\n\n<slide>\n  <h2>Dockerfile explained (1)</h2>\n  <code prism class='language-bash'>\nRUN adduser todo --home /opt/todo --shell /bin/bash --disabled-password --gecos \"\"\n\nRUN apt-get update && \\\n    apt-get install -y libpq-dev nodejs && \\\n    rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*.deb\n  </code>\n</slide>\n\n<slide>\n  <h2>Dockerfile explained (2)</h2>\n  <code prism class='language-bash'>\nADD Gemfile /opt/todo/\nADD Gemfile.lock /opt/todo/\nRUN chown -R todo:todo /opt/todo\nRUN su -c \"D=/opt/todo/bundle; mkdir $D && bundle install --deployment --path $D\"\\\n  -s /bin/bash -l todo\n  </code>\n</slide>\n\n<slide>\n  <h2>Dockerfile explained (3)</h2>\n  <code prism class='language-bash'>\nWORKDIR /opt/todo\nEXPOSE 3000\nADD . /opt/todo\nRUN chown -R todo:todo /opt/todo\n  </code>\n</slide>\n\n<slide>\n  <h2>Dockerfile explained (4)</h2>\n  <code prism class='language-bash'>\nUSER todo\nENTRYPOINT [\"/bin/bash\", \"/opt/todo/bin/docker_entrypoint.sh\"]\nCMD [\"bundle\", \"exec\", \"rails\", \"server\"]\n  </code>\n</slide>\n\n<slide>\n  <h2>Postgres container (0)</h2>\n  <code prism class='language-bash'>\n$ docker pull postgres:9.3\n$ docker run -d --name postgres -t postgres:9.3\na5723351c46ce015d585dd49f230ecb376557d0b955f233dbff3bf92f3a6721d\n$ docker ps\nCONTAINER ID        IMAGE               [...]   PORTS               NAMES\na5723351c46c        postgres:9          [...]   5432/tcp            postgres\n  </code>\n\n  <p>\n    This container <code class='inline'>EXPOSE</code>s port <code class='inline'>5432</code>.\n  </p>\n  <p>\n    Question is, how do we connect to it?\n  </p>\n</slide>\n\n<slide>\n  <h2>Postgres container (1)</h2>\n  <p>\n    We can't just hardcode its ip address, as it defeats the purpose...\n  </p>\n  <code prism class='language-bash'>\n$ docker inspect postgres | grep NetworkSettings -A 9\n    \"NetworkSettings\": {\n        \"Bridge\": \"docker0\",\n        \"Gateway\": \"172.17.42.1\",\n        \"IPAddress\": \"172.17.0.4\",\n        \"IPPrefixLen\": 16,\n        \"PortMapping\": null,\n        \"Ports\": {\n            \"5432/tcp\": null\n        }\n    },\n  </code>\n</slide>\n\n<slide>\n  <h2>The wrapper script (0)</h2>\n  <p>\n    In the Dockerfile, an <code class='inline'>ENTRYPOINT</code> was specified.\n  </p>\n  <code prism class='language-bash'>\n#!/bin/bash\n\n# exit with error if a variable is unbound (not set)\nset -u\n# exit with error if a command returns a non-zero status\nset -e\n\nPGADDR=$DB_PORT_5432_TCP_ADDR\nPGPORT=$DB_PORT_5432_TCP_PORT\nPGDBNAME=\"${DATABASE_NAME:-todo}\"\nPGUSER=\"${DATABASE_USER:-postgres}\"\n\n# export database configuration for rails.\nexport DATABASE_URL=\"postgresql://${PGUSER}@${PGADDR}:${PGPORT}/${PGDBNAME}\"\n\n# exec what the user wants\nexec \"$@\"\n  </code>\n\n  <p>\n    <code class='inline'>DB_PORT_5432_TCP_*</code> variables are injected by docker <br/>\n  </p>\n</slide>\n\n<slide>\n  <h2>The wrapper script (1)</h2>\n  <p>\n    Trying to execute the container will throw an error (it's a feature!)\n  </p>\n  <code prism class='language-bash'>\n$ docker run --rm --name todoapp -t rubyday/todo\n/opt/todo/bin/docker_entrypoint.sh: line 6: DB_PORT_5432_TCP_ADDR: unbound variable\n  </code>\n</slide>\n\n<slide>\n  <h2>Linking!</h2>\n  <code prism class='language-clike'>\n$ docker run --rm --link postgres:db --name todoapp \\\n  -t rubyday/todo /bin/bash -c 'env'\n\nDB_ENV_PGDATA=/var/lib/postgresql/data\nDB_NAME=/todoapp/db\nDB_PORT_5432_TCP_ADDR=172.17.0.4\nDB_PORT=tcp://172.17.0.4:5432\nDB_ENV_LANG=en_US.utf8\nDB_PORT_5432_TCP=tcp://172.17.0.4:5432\nDB_ENV_PG_MAJOR=9.3\nDB_PORT_5432_TCP_PORT=5432\nDB_PORT_5432_TCP_PROTO=tcp\nDB_ENV_PG_VERSION=9.3.5-1.pgdg70+1\nDATABASE_URL=postgresql://postgres@172.17.0.4:5432/todo\n</code>\n  <ul>\n    <li>\n      <code class='inline'>--link postgres:db</code> link container named <strong>postgres</strong> with alias <strong>db</strong>\n    </li>\n    <li>\n      alias <strong>db</strong> tells docker to prefix all variables with <code class='inline'>DB</code>\n    </li>\n  </ul>\n</slide>\n\n<slide>\n  <h2>Start!</h2>\n  <p>\n    Pretty much standard business\n  </p>\n  <code prism class='language-bash'>\n$ docker run --rm --link postgres:db -t rubyday/todo bundle exec rake db:create\n$ docker run --rm --link postgres:db -t rubyday/todo bundle exec rake db:schema:load\n\n$ docker run --link postgres:db --name todoapp -p 3000:3000 -d -t rubyday/todo\n7540f7647309110c53d2349cf7c68d1388e0f43de3d5904396fa2bb4041b6b28\n\n$ docker ps\nCONTAINER ID  IMAGE                [..] PORTS                  NAMES\n7540f7647309  rubyday/todo:latest  [..] 0.0.0.0:3000-&gt;3000/tcp todoapp\na5723351c46c  postgres:9           [..] 5432/tcp               postgres,todoapp/db\n  </code>\n  <p>\n    <code class='inline'>-p 3000:3000</code> creates a port forward from the host to the container\n  </p>\n</slide>\n\n<slide>\n  <h2>Does it work?</h2>\n  <code prism class='language-http'>\n$ netstat -lnp | grep 3000\ntcp6       0      0 :::3000      :::*    LISTEN      3645/docker-proxy\n\n$ curl -v http://localhost:3000\n* Connected to localhost (127.0.0.1) port 3000 (#0)\n> GET / HTTP/1.1\n> User-Agent: curl/7.35.0\n> Host: localhost:3000\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n[...]\n  </code>\n\n  <p class='big'>\n    Good.\n  </p>\n</slide>\n\n<slide>\n  <h2>Too much work. Let's Automate</h2>\n  <img class=\"center media fright\" style='margin-top:120px' src='images/fig.png' alt='FIG'/>\n  <p>\n    Enters <a href='http://www.fig.sh/'><code class='inline'>FIG</code></a>.\n  </p>\n  <p>\n    <code class='inline'>fig.yml</code>:\n  </p>\n  <code prism class='language-yaml'>\nweb:\n    build: .\n    links:\n      - db\n    ports:\n      - \"3000:3000\"\ndb:\n    image: postgres:9.3\n    ports:\n      - \"5432\"\n  </code>\n</slide>\n\n<slide>\n  <h2>..small tweak for fig</h2>\n  <code prism class='language-diff'>\ndiff --git a/bin/docker_entrypoint.sh b/bin/docker_entrypoint.sh\nindex 0775ece..b69980c 100644\n--- a/bin/docker_entrypoint.sh\n+++ b/bin/docker_entrypoint.sh\n@@ -3,8 +3,8 @@\n set -u\n set -e\n\n-PGADDR=$DB_PORT_5432_TCP_ADDR\n-PGPORT=$DB_PORT_5432_TCP_PORT\n+PGADDR=$DB_1_PORT_5432_TCP_ADDR\n+PGPORT=$DB_1_PORT_5432_TCP_PORT\n PGDBNAME=\"${DATABASE_NAME:-todo}\"\n PGUSER=\"${DATABASE_USER:-postgres}\"\n  </code>\n</slide>\n\n<slide>\n  <h2>Profit!</h2>\n  <code prism class='language-bash'>\n$ fig up   # familiar, huh?\n$ fig run web bundle exec rake db:create\n$ fig run web bundle exec rake db:schema:load\n\n$ netstat -lnp | grep 3000\ntcp6       0      0 :::3000      :::*    LISTEN      24727/docker-proxy\n\n$ curl -v http://localhost:3000\n* Connected to localhost (127.0.0.1) port 3000 (#0)\n> GET / HTTP/1.1\n> User-Agent: curl/7.35.0\n> Host: localhost:3000\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n[...]\n  </code>\n</slide>\n\n<slide>\n  <h2>More fig commands</h2>\n  <code prism class='language-bash'>\n$ fig ps\n   Name              Command            State        Ports\n---------------------------------------------------------------\ntodo_db_1    postgres                   Up      49160->5432/tcp\ntodo_web_1   bundle exec rails server   Up      3000->3000/tcp\n\n# if we remove the :3000 for the web port in the fig.yml\n$ fig scale web=2\nStarting todo_web_2...\n$ fig ps\n   Name              Command            State        Ports\n---------------------------------------------------------------\ntodo_db_1    postgres                   Up      49172->5432/tcp\ntodo_web_2   bundle exec rails server   Up      49174->3000/tcp\ntodo_web_1   bundle exec rails server   Up      49173->3000/tcp\n  </code>\n</slide>\n\n<slide>\n  <h2>Very Opinionated Tips</h2>\n  <p class=\"big\">\n    Leverage the cache.\n  </p>\n  <code prism class='language-bash'>\n$ time docker build -t rubyday/todo .\n# ==>	0m1.384s\n$ touch app/models/user.rb && time docker build -t rubyday/todo .\n# ==> 0m4.835s\n\n# Move the ADD . statement above bundle, then rebuild from scratch\n$ touch app/model/user.rb && time docker build -t rubyday/todo .\n# ==> 1m54.277s\n  </code>\n</slide>\n\n<slide>\n  <h2>Very Opinionated Tips</h2>\n  <p class=\"big tips\">\n    Choose your storage driver wisely.\n  </p>\n  <p>\n    <code class='inline'>devicemapper</code> is slower. <code class='inline'>AUFS</code> works ok.\n  </p>\n  <p>\n    <code class='inline'>BTRFS</code> is ... well... <strike>btrfs</strike> the <em>future</em>.\n  </p>\n</slide>\n\n<slide>\n  <h2>Very Opinionated Tips</h2>\n  <p class=\"big tips\">\n    Always tag your image(s). <br /> Always <code class='inline'>pull</code> supplying a tag. <br/>\n    Always use a tag for <code class='inline'>FROM</code>.\n  </p>\n  <p>\n    Don't rely on <code class='inline'>:latest</code> tag.\n  </p>\n</slide>\n\n<slide>\n  <h2>Very Opinionated Tips</h2>\n  <p class=\"big tips\">\n    If possible, avoid run+commit. <br /> Prefer <code class='inline'>Dockerfile</code>s.\n  </p>\n  <p>\n    Waaaaaay more reproducible.\n  </p>\n</slide>\n\n<slide>\n  <h2>Very Opinionated Tips</h2>\n  <p class=\"big tips\">\n    Installing ssh into the container is <strong>not</strong> clever.\n  </p>\n\n  <p>\n    <code class='inline'>NSINIT</code> is your friend (<a href='https://gist.github.com/ubergarm/ed42ebbea293350c30a6'>gist</a>)\n  </p>\n  <p>\n    <a href='https://gist.github.com/ubergarm/ed42ebbea293350c30a6'>https://gist.github.com/ubergarm/ed42ebbea293350c30a6</a>\n  </p>\n</slide>\n\n<slide>\n  <h2>Very Opinionated Tips</h2>\n  <p class=\"big tips\">\n    One process per container. Don't fork.\n  </p>\n  <p>\n    Don't doublefork either. Stay in foreground.\n  </p>\n</slide>\n\n<slide>\n  <h2>Very Opinionated Tips</h2>\n  <p class=\"big tips\">\n    Use a process manager.\n  </p>\n  <p>\n    Both <code class='inline'>upstart</code> or <code class='inline'>systemd</code> are good at it.<br />\n    Run containers without the <code class='inline'>-d</code>.\n  </p>\n</slide>\n\n<slide>\n  <h2>THANKS!</h2>\n  <p class='big abs-center'>\n    That's all. For now.\n  </p>\n</slide>\n\n<slide>\n  <h2>Questions?</h2>\n  <p class='big abs-center'>\n    QUESTIONS?\n  </p>\n\n</slide>\n<slide>\n  <h2>Shameless plug</h2>\n  <p>\n    These slides were made with <span class='big'><a href='https://github.com/Granze/applause'><code class='inline'>applause https://github.com/Granze/applause</code></a></span>\n  </p>\n  <p>\n    Go check it out, it's <strong>AWESOME!</strong>\n  </p>\n</slide>\n")}])}(),applause.controller("DeckCtrl",["$scope","Appdata","$localStorage",function(n,e,s){n.isProgressBarVisible=e.progressBar,n.isSlideCountVisible=e.slideCount,s.$reset(),n.$storage=s.$default({currentSlide:1}),n.$watch(function(){return e},function(e){n.lastSlide=e.slides.length},!0),n.next=function(){n.$storage.currentSlide<n.lastSlide&&(n.$storage.currentSlide=n.$storage.currentSlide+=1)},n.prev=function(){n.$storage.currentSlide>1&&(n.$storage.currentSlide=n.$storage.currentSlide-=1)},n.$parent.keyup=function(e){switch(e.keyCode){case 27:n.showGoTo=!n.showGoTo;break;case 37:n.prev();break;case 32:case 39:n.next()}}}]),applause.directive("slide",["Appdata",function(n){var e=1,s=function(s){s.n=e,s.isPreviewMode=n.isPreviewMode,n.slides.push(e),e+=1};return{template:'<section class="slide" ng-class="{previous: n === $storage.currentSlide-1, current: n === $storage.currentSlide, next: n === $storage.currentSlide+1, preview: isPreviewMode}" ng-transclude fit></section>',restrict:"E",transclude:!0,replace:!0,scope:!0,link:s}}]),applause.directive("fit",["$window","Appdata",function(n,e){var s=function(s,i){s.resizeSlide=function(){var s=n.document.querySelector(".slide"),t=n.innerWidth/s.clientWidth,a=n.innerHeight/s.clientHeight,o=Math.min(t,a);e.isPreviewMode?i.css({transformOrigin:"0 0",webkitTransformOrigin:"0 0",transform:"scale("+o/2+")",webkitTransform:"scale("+o/2+")"}):i.css({transformOrigin:"left top",webkitTransformOrigin:"left top",transform:"scale("+o+") translate(-50%, -50%)",webkitTransform:"scale("+o+") translate(-50%, -50%)"})},s.resizeSlide(),angular.element(n).bind("resize",function(){s.resizeSlide(),s.$apply()})};return{link:s}}]),applause.directive("progressBar",function(){var n=function(n,e){n.$watch(function(s){var i=(n.$storage.currentSlide/s.lastSlide*100).toFixed(2);e.css("width",i+"%")})};return{template:'<div id="progress-bar"></div>',restrict:"E",replace:!0,link:n}}),applause.factory("Appdata",["config",function(n){var e=[],s=angular.fromJson(n),i={slides:e,isPreviewMode:"?preview"===document.location.search};return angular.extend(s,i)}]),angular.module("applauseConfig",[]).constant("config",{progressBar:!0,slideCount:!1,counter:!0,startFrom:45,theme:"gild"}),applause.directive("markdown",["$window",function(n){String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")});var e=new n.Showdown.converter,s=function(n,s){s.html(e.makeHtml(s.text().trim()))};return{restrict:"EA",link:s}}]),applause.directive("bgImg",["$filter",function(n){return function(e,s,i){var t="";if(t=/^(f|ht)tps?:\/\//i.test(i.bgImg)?i.bgImg:"images/"+i.bgImg,s.css({background:"transparent url("+t+") no-repeat 0 0","background-size":"cover"}),i.credits){var a=n("linky")(i.credits,"_blank"),o='<div class="credits">Photo credits: '+a+"</div>";s.append(o)}}}]),applause.directive("goto",["Appdata",function(n){var e=function(e){e.goTo=function(){return isNaN(parseInt(e.goToSlide))?!1:(e.$storage.currentSlide=parseInt(e.goToSlide)<=n.slides.length?parseInt(e.goToSlide):n.slides.length,e.goToSlide="",e.showGoTo=!1,void 0)}};return{restrict:"EA",template:'<form ng-submit="goTo()" ng-show="showGoTo" id="go-to" name="goto"><label>Go to: <input required ng-model="goToSlide" type="text" placeholder="slide" autofocus="autofocus"></label></form>',link:e}}]),applause.directive("flipClock",["Appdata","$timeout","$window",function(n,e,s){var i=function(i){var t,a,o=s.moment,r=function(){i.isRunning&&(i.time=t.add(1,"s").format("HHmmss"),e(r,1e3))},l=function(){i.isRunning&&i.time>0&&(i.time=t.subtract(1,"s").format("HHmmss"),e(l,1e3))};i.isRunning=!1,a=n.startFrom,i.time="000000",i.isPreviewMode=n.isPreviewMode,i.isCounterEnabled=n.counter,i.startCount=function(){t||(t=o().hours(0).minutes(a||0).seconds(0)),i.isRunning=!0,a>0?l():r()},i.stopCount=function(){i.isRunning=!1},i.resetCount=function(){i.isRunning=!1,i.time=a?"00"+a+"00":"000000",t=null},i.time=a?"00"+a+"00":"000000"};return{template:'<div class="flip" ng-show="isPreviewMode && isCounterEnabled"><div class="clock"><span id="hours0">{{time[0]}}</span><span id="hours1">{{time[1]}}</span> <b>:</b><span id="minutes0">{{time[2]}}</span><span id="minutes1">{{time[3]}}</span> <b>:</b><span id="seconds0">{{time[4]}}</span><span id="seconds1">{{time[5]}}</span></div><div class="commands"><button class="toggle btn" ng-click="startCount()" ng-disabled="isRunning">Start</button><button class="toggle btn" ng-click="stopCount()">Stop</button><button class="reset btn" ng-click="resetCount()">Reset</button></div></div>',restrict:"E",replace:!0,link:i}}]),applause.directive("prism",function(){return{restrict:"A",template:"<pre><code ng-transclude></code></pre>",replace:!0,transclude:!0,link:function(n,e){e.ready(function(){Prism.highlightAll()})}}});